{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","TextForm","getWords","text","words","replace","split","i","length","splice","useState","setText","heading","onChange","event","target","value","rows","dangerouslySetInnerHTML","__html","indexOf","bold","toUpperCase","toLowerCase","navigator","clipboard","writeText","showAlert","Alert","alert","role","msg","App","theme","localStorage","getItem","setMode","document","body","style","background","setAlert","setItem","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.97126365.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n        <a className=\"nav-link\" href=\"#\">Home</a>\r\n        </li>\r\n        </ul>\r\n        </div>\r\n\r\n        <div className={`float-end form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <div className={`rounded-circle bg-${props.mode==='light'?'dark':'light'} color-dot`} onClick={props.toggleMode}></div>\r\n        </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUp = () => {\r\n        setText(text.toUpperCase());\r\n    }\r\n    const handleLow = () => {\r\n        setText(text.toLowerCase());\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleClear = () => {\r\n        setText(\"\");\r\n    }\r\n\r\n    const handleBold = () => {\r\n        if(!(text.indexOf(\"<b>\") > -1 || text.indexOf(\"<B>\") > -1))\r\n            setText(text.bold());\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Text Copied Successfully!\", \"success\");\r\n    }\r\n\r\n    // const toggleStyle = () => {\r\n    //     if(myStyle.color === \"black\"){\r\n    //         setStyle({\r\n    //             'color': 'white',\r\n    //             'background': 'black'\r\n    //         });\r\n    //         setBtnText(\"Light mode\");\r\n    //     }\r\n    //     else {\r\n    //         setStyle({\r\n    //             'color': 'black',\r\n    //             'background': 'white'\r\n    //         });\r\n    //         setBtnText(\"Dark mode\");\r\n    //     }\r\n    // }\r\n\r\n    const getWords = (text) => {\r\n        let words = text.replace(/\\s{2,}/g,' ').split(/\\s|\\n/);\r\n        for(let i = 0; i < words.length; i++) {\r\n            if(words[i] === '') words.splice(i, 1);\r\n        }\r\n        return words.length\r\n    }\r\n\r\n    // const [myStyle, setStyle] = useState({\r\n    //     'color': 'black',\r\n    //     'background': 'white'\r\n    // })\r\n    // const [btnText, setBtnText] = useState(\"Dark mode\")\r\n\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n        <div className={`container text-${props.mode==='light'?'dark':'light'}`}>\r\n            <form>\r\n            <div className=\"form-group mt-5\">\r\n            <h2>{props.heading}</h2>\r\n            <textarea\r\n                className={`form-control text-${props.mode==='light'?'dark':'light'} bg-${props.mode}`}\r\n                onChange={handleChange}\r\n                value={text}\r\n                id=\"txt\"\r\n                rows=\"8\">\r\n                </textarea>\r\n            </div>\r\n            </form>\r\n            <em>Result:</em>\r\n            <div className=\"container border p-2 mb-3\">\r\n                <p className=\"display\"  dangerouslySetInnerHTML={{__html: text}}></p>\r\n            </div>\r\n            <button className=\"btn btn-dark\" onClick={handleBold}>Bold</button>\r\n            <button className=\"btn btn-primary ml-3\" onClick={handleUp}>Uppercase</button>\r\n            <button className=\"btn btn-primary ml-3\" onClick={handleLow}>Lowercase</button>\r\n            <button className=\"btn btn-danger ml-3\" onClick={handleClear}>Clear</button>\r\n            <button className=\"btn btn-secondary ml-3\" onClick={handleCopy}>Copy</button>\r\n        </div>\r\n        <div className={`container mt-5 text-${props.mode==='light'?'dark':'light'}`}>\r\n            <h3>Your text summary:</h3>\r\n            <p> { getWords(text) } words <br/>\r\n                { text.length } characters <br/>\r\n                { getWords(text) * 0.008 } minutes read\r\n            </p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} fade show`} role=\"alert\">\r\n            { props.alert.msg }\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport {useState} from 'react'\nimport Alert from './components/Alert';\n// import About from './components/About';\n\nfunction App() {\n  let theme = localStorage.getItem('mode');\n  if(theme == null) theme = 'light';\n  const [mode, setMode] = useState(theme); // dark mode enabled or not\n  if(mode === 'dark')\n    document.body.style.background = \"#494f55\";\n  else\n    document.body.style.background = \"white\";\n    \n\n\t// const [red, setRed] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n\t// for alert\n  const showAlert = (message, type) => {\n    setAlert({\n\t\t\tmsg: message,\n\t\t\ttype: type,\n\t\t});\n\t\tsetTimeout( () => {\n\t\t\tsetAlert(null);\n\t\t}, 2000);\n  }\n\n\t// for dark mode\n  const toggleMode = () => {\n    if(mode === 'light') {\n      setMode('dark');\n      document.body.style.background = \"#494f55\";\n      localStorage.setItem('mode', 'dark');\n    }\n    else{\n      setMode('light');\n      document.body.style.background = \"white\";\n      localStorage.setItem('mode', 'light');\n    }\n  }\n\n\t// for red mode\n\t// const redMode = () => {\n  //   if(red === 'light') {\n  //     setRed('red');\n  //     document.body.style.background = \"red\";\n  //   }\n  //   else{\n  //     setRed('light');\n  //   }\n  // }\n\n\n  return (\n    <>\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert} />\n    <TextForm heading=\"Enter the text to analyze\" mode={mode} showAlert={showAlert}/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   Navigate,\n//   Link,\n//   Outlet,\n//   useParams,\n//   NavLink,\n// } from 'react-router-dom';\n\nReactDOM.render(\n  <App />,\n//   <Router>\n//     <Routes>\n//       <Route path=\"/\" element={<Home/>} />\n//       <Route path=\"/myapps\" element={<Navigate replace to=\"/learn\"/>} />\n//       <Route path=\"/learn\" element={<Learn/>}>\n//         <Route path=\"courses\" element={<Courses/>} >\n//           <Route path=\":courseid\" element={<CourseId/>} />\n//         </Route>\n//         <Route path=\"bundles\" element={<Bundles/>} />\n//       </Route>\n//     </Routes>\n//   </Router>,\n  document.getElementById('root')\n);\n\n// function Home() {\n//   return(\n//     <div>\n//       <h1>Home ROuter</h1>\n//     </div>\n//   )\n// }\n\n// function Learn() {\n//   return(\n//     <div>\n//       <h4>All COurses are listed here:</h4>\n//       <Link to=\"/learn/courses\">Courses</Link>\n//       <Link to=\"/learn/bundles\">Bundle</Link>\n//       <Outlet />\n//     </div>\n//   )\n// }\n\n// function Courses() {\n//   const courseList = [\"React\", \"Angular\", \"Bootstrap\", \"Django\"];\n//   const randomCourse = courseList[Math.floor(Math.random()*courseList.length)];\n//   return(\n//     <div>\n//       <h1>Courses ROuter</h1>\n\n//       <p>More test</p>\n//       <NavLink style={ ({isActive}) => {\n//         return {\n//           backgroundColor: isActive ? 'yellow' : \"green\"\n//         }\n//       }} to={`/learn/courses/${randomCourse}`}>{randomCourse}</NavLink>\n//       <NavLink to={\"/learn/courses/hii\"}>hello</NavLink>\n//       <Outlet></Outlet>\n//     </div>\n//   )\n// }\n\n// function Bundles() {\n//   return(\n//     <div>\n//       <h1>Bundle ROuter</h1>\n//     </div>\n//   )\n// }\n\n// function CourseId() {\n//   const {courseid} = useParams();\n//   return(\n//     <div>\n//       <h1>{courseid}</h1>\n//     </div>\n//   )\n// }\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}